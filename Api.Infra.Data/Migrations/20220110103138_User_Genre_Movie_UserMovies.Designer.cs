// <auto-generated />
using System;
using Api.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220110103138_User_Genre_Movie_UserMovies")]
    partial class User_Genre_Movie_UserMovies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Api.Domain.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22ffbd18-cdb9-45cc-97b0-51e97700bf71"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 937, DateTimeKind.Utc).AddTicks(8988),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("7cc33300-586e-4be8-9a4d-bd9f01ee9ad8"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 937, DateTimeKind.Utc).AddTicks(9104),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("cb9e6888-2094-45ee-bc44-37ced33c693a"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 937, DateTimeKind.Utc).AddTicks(9112),
                            Name = "Ficção"
                        },
                        new
                        {
                            Id = new Guid("409b9043-88a4-4e86-9cca-ca1fb0d0d35b"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 937, DateTimeKind.Utc).AddTicks(9118),
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = new Guid("5abca453-d035-4766-a81b-9f73d683a54b"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 937, DateTimeKind.Utc).AddTicks(9123),
                            Name = "Terror"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.MovieEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdc250e7-cb74-4b4a-84f4-8fb3e855feb9"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 935, DateTimeKind.Utc).AddTicks(2737),
                            Email = "user@example.com",
                            Name = "User Padrão",
                            UpdateAt = new DateTime(2022, 1, 10, 10, 31, 37, 935, DateTimeKind.Utc).AddTicks(4447)
                        },
                        new
                        {
                            Id = new Guid("0b564777-907c-4494-8c5c-5f7b31482301"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 935, DateTimeKind.Utc).AddTicks(5211),
                            Email = "eskokado@email.com",
                            Name = "Edson Shideki Kokado",
                            UpdateAt = new DateTime(2022, 1, 10, 10, 31, 37, 935, DateTimeKind.Utc).AddTicks(5239)
                        },
                        new
                        {
                            Id = new Guid("e3e06d25-b04c-409a-9170-585f112df5a0"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 935, DateTimeKind.Utc).AddTicks(5259),
                            Email = "mariasilva@email.com",
                            Name = "Maria da Silva",
                            UpdateAt = new DateTime(2022, 1, 10, 10, 31, 37, 935, DateTimeKind.Utc).AddTicks(5261)
                        },
                        new
                        {
                            Id = new Guid("34ce0948-e28f-43d5-9039-ff2e81cc066f"),
                            CreateAt = new DateTime(2022, 1, 10, 10, 31, 37, 935, DateTimeKind.Utc).AddTicks(5266),
                            Email = "josesouza@email.com",
                            Name = "José Souza",
                            UpdateAt = new DateTime(2022, 1, 10, 10, 31, 37, 935, DateTimeKind.Utc).AddTicks(5268)
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.UserMoviesEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UserMovies");
                });

            modelBuilder.Entity("Api.Domain.Entities.MovieEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.GenreEntity", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserMoviesEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.MovieEntity", "Movie")
                        .WithMany("UserMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("UserMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Domain.Entities.GenreEntity", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Api.Domain.Entities.MovieEntity", b =>
                {
                    b.Navigation("UserMovies");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("UserMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
