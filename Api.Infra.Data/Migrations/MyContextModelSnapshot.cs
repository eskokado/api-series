// <auto-generated />
using System;
using Api.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Api.Domain.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22ffbd18-cdb9-45cc-97b0-51e97700bf71"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 243, DateTimeKind.Utc).AddTicks(5513),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("7cc33300-586e-4be8-9a4d-bd9f01ee9ad8"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 243, DateTimeKind.Utc).AddTicks(5664),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("cb9e6888-2094-45ee-bc44-37ced33c693a"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 243, DateTimeKind.Utc).AddTicks(5679),
                            Name = "Ficção"
                        },
                        new
                        {
                            Id = new Guid("409b9043-88a4-4e86-9cca-ca1fb0d0d35b"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 243, DateTimeKind.Utc).AddTicks(5688),
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = new Guid("5abca453-d035-4766-a81b-9f73d683a54b"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 243, DateTimeKind.Utc).AddTicks(5697),
                            Name = "Terror"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.MovieEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8037d515-63e7-415f-bc89-35df0801872d"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 237, DateTimeKind.Utc).AddTicks(7557),
                            Email = "user@example.com",
                            Name = "User Padrão",
                            UpdateAt = new DateTime(2021, 6, 8, 12, 21, 55, 238, DateTimeKind.Utc).AddTicks(1251)
                        },
                        new
                        {
                            Id = new Guid("b74236f8-9f4b-4536-88ac-4a286f1b75cb"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 238, DateTimeKind.Utc).AddTicks(2614),
                            Email = "eskokado@email.com",
                            Name = "Edson Shideki Kokado",
                            UpdateAt = new DateTime(2021, 6, 8, 12, 21, 55, 238, DateTimeKind.Utc).AddTicks(2651)
                        },
                        new
                        {
                            Id = new Guid("9b4d0f6f-b4ef-4f4e-9329-ff05fd738c76"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 238, DateTimeKind.Utc).AddTicks(2681),
                            Email = "mariasilva@email.com",
                            Name = "Maria da Silva",
                            UpdateAt = new DateTime(2021, 6, 8, 12, 21, 55, 238, DateTimeKind.Utc).AddTicks(2687)
                        },
                        new
                        {
                            Id = new Guid("630c70a5-06de-4310-957c-7d1dd4f72724"),
                            CreateAt = new DateTime(2021, 6, 8, 12, 21, 55, 238, DateTimeKind.Utc).AddTicks(2693),
                            Email = "josesouza@email.com",
                            Name = "José Souza",
                            UpdateAt = new DateTime(2021, 6, 8, 12, 21, 55, 238, DateTimeKind.Utc).AddTicks(2696)
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.UserMoviesEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UserMovies");
                });

            modelBuilder.Entity("Api.Domain.Entities.MovieEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.GenreEntity", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserMoviesEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.MovieEntity", "Movie")
                        .WithMany("UserMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.UserEntity", "User")
                        .WithMany("UserMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Domain.Entities.GenreEntity", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Api.Domain.Entities.MovieEntity", b =>
                {
                    b.Navigation("UserMovies");
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("UserMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
